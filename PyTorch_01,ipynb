{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["JPGmCEiPOMSS","zhqIpavtUIdm"],"gpuType":"T4","authorship_tag":"ABX9TyPgY2gZs/SYrNLz1iJ/+7FX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# Our first Model\n","\n","In the very end of the script, you can find all the workflow at once"],"metadata":{"id":"2TOO63CVN6xd"}},{"cell_type":"code","execution_count":105,"metadata":{"id":"wMTVAwaJNts6","executionInfo":{"status":"ok","timestamp":1731182822022,"user_tz":-60,"elapsed":254,"user":{"displayName":"xlu T","userId":"02570204609344976313"}}},"outputs":[],"source":["import torch\n","from torch import nn\n","import matplotlib.pyplot as plt\n","import numpy as np"]},{"cell_type":"code","source":["# Use linear regression to create X and y\n","\n","weight = 0.7\n","bias = 0.3\n","\n","X = torch.arange(0, 1, 0.02).unsqueeze(dim = 1) #Important, not sure why unsqueeze.\n","y = weight * X + bias\n","len(y)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7KoNsVCXERUg","executionInfo":{"status":"ok","timestamp":1731182822621,"user_tz":-60,"elapsed":2,"user":{"displayName":"xlu T","userId":"02570204609344976313"}},"outputId":"e4f8da47-4b31-4209-843b-df794ac71963"},"execution_count":106,"outputs":[{"output_type":"execute_result","data":{"text/plain":["50"]},"metadata":{},"execution_count":106}]},{"cell_type":"markdown","source":["### Training and Test Set"],"metadata":{"id":"EMxJufWJFGJR"}},{"cell_type":"code","source":["train_split = int(0.8 * len(X))\n","\n","X_train, y_train = X[:train_split], y[:train_split]\n","X_test, y_test = X[train_split:], y[train_split:]\n","\n","# Also you can use scikit learn, we will see it later"],"metadata":{"id":"eP202W_vFC1Z","executionInfo":{"status":"ok","timestamp":1731182823272,"user_tz":-60,"elapsed":652,"user":{"displayName":"xlu T","userId":"02570204609344976313"}}},"execution_count":107,"outputs":[]},{"cell_type":"markdown","source":["### Create Visualization of Tensors"],"metadata":{"id":"TwQytSFtF3vR"}},{"cell_type":"code","source":["def plot_predictions(train_data = X_train,\n","                     train_labels = y_train,\n","                     test_data = X_test,\n","                     test_labels = y_test,\n","                     predictions = None):\n","  plt.figure(figsize=(10,7))\n","  plt.scatter(train_data, train_labels, c = \"b\", s = 4, label = \"Training data\")\n","  plt.scatter(test_data, test_labels, c = \"b\", s = 4, label = \"Test data\")\n","\n","  if predictions is not None:\n","      plt.scatter(test_data, plot_predictions)\n","\n","\n","\n","plot_predictions()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":599},"id":"Axdt5XqHF157","executionInfo":{"status":"ok","timestamp":1731182823273,"user_tz":-60,"elapsed":14,"user":{"displayName":"xlu T","userId":"02570204609344976313"}},"outputId":"9bd67b07-85f2-45e6-94f8-21bd7c1161b7"},"execution_count":108,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x700 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"muUtrXIA14md","executionInfo":{"status":"ok","timestamp":1731182823273,"user_tz":-60,"elapsed":12,"user":{"displayName":"xlu T","userId":"02570204609344976313"}}},"execution_count":108,"outputs":[]},{"cell_type":"markdown","source":["### Model Building Essentials\n","\n","* torch.nn - all of the buildings for NN\n","* torch.nn.Parameter - what our model should learn\n","* torch.nn.Module - the base class\n","* torch.optim - optimizers"],"metadata":{"id":"GoLzSUjRQ4pC"}},{"cell_type":"markdown","source":["### Create a first model to predict the linear regression above\n","\n","We use for now Gradient Descent, not Backpropagation"],"metadata":{"id":"EVqaPYyjHwyx"}},{"cell_type":"code","source":["# Create a model Class\n","\n","class LinearRegressionModel(nn.Module): # inherits from nn.Module\n","  def __init__(self):\n","    super().__init__()\n","\n","    # Initialize model parameters (weights and biases for us)\n","    self.weights = nn.Parameter(torch.randn(1,\n","                                            requires_grad = True, # default. To use Gradient Descent\n","                                            dtype = torch.float))\n","    self.bias = nn.Parameter(torch.randn(1,\n","                                         requires_grad = True,\n","                                         dtype = torch.float))\n","\n","  # Forward method to do computation in the model\n","  def forward(self, x: torch.Tensor) -> torch.Tensor: # x is input\n","    return self.weights * x + self.bias"],"metadata":{"id":"GPtt9rMYH4Kp","executionInfo":{"status":"ok","timestamp":1731182823273,"user_tz":-60,"elapsed":12,"user":{"displayName":"xlu T","userId":"02570204609344976313"}}},"execution_count":109,"outputs":[]},{"cell_type":"code","source":["# Initialize a model and look at parameters\n","torch.manual_seed(42)\n","\n","model_0 = LinearRegressionModel()\n","list(model_0.parameters())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JDhy9dGNK33N","executionInfo":{"status":"ok","timestamp":1731182823273,"user_tz":-60,"elapsed":12,"user":{"displayName":"xlu T","userId":"02570204609344976313"}},"outputId":"28d4d120-5c2c-4864-d496-f5e3812fdd57"},"execution_count":110,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Parameter containing:\n"," tensor([0.3367], requires_grad=True),\n"," Parameter containing:\n"," tensor([0.1288], requires_grad=True)]"]},"metadata":{},"execution_count":110}]},{"cell_type":"markdown","source":["### Make predictions"],"metadata":{"id":"JPGmCEiPOMSS"}},{"cell_type":"code","source":["# If the model is trained, I can easily make prediction this way\n","\n","with torch.inference_mode(): # makes it faster, does not track gradients and what happens in between\n","  y_preds = model_0(X_test) #it's like calling .forward(X_test)!"],"metadata":{"id":"pe4OX0AXOMGE","executionInfo":{"status":"ok","timestamp":1731182823273,"user_tz":-60,"elapsed":10,"user":{"displayName":"xlu T","userId":"02570204609344976313"}}},"execution_count":111,"outputs":[]},{"cell_type":"markdown","source":["### Training our model\n","* Loss function - tells me how wrong I am\n","* Optimizer - given the loss, it adjusts parameters and learns\n","\n","We will need:\n","* a training loop\n","1. forward pass\n","2. calculate loss\n","3. optimizer zero grad\n","4. backward pass\n","5. optimizer step\n","* a test loop\n","1. forward pass\n","2. calculate test loss"],"metadata":{"id":"O1m88VIgRFxx"}},{"cell_type":"code","source":["# Setup a Loss Function\n","loss_fn = nn.L1Loss() # MAE\n","\n","# Setup an optimizer ( SGD, Adam, adagrad...)\n","optimizer = torch.optim.SGD(params = model_0.parameters(),\n","                            lr = 0.01) # learning rate"],"metadata":{"id":"jM-5H7A0NCd7","executionInfo":{"status":"ok","timestamp":1731182823274,"user_tz":-60,"elapsed":11,"user":{"displayName":"xlu T","userId":"02570204609344976313"}}},"execution_count":112,"outputs":[]},{"cell_type":"code","source":["# Build a training loop\n","\n","torch.manual_seed(42)\n","\n","epochs = 200 # one loop through the data\n","loss_values = []\n","test_loss_values = []\n","\n","for epoch in range(epochs):\n","\n","  model_0.train() # training mode\n","\n","  y_pred = model_0(X_train) # forward pass\n","\n","  loss = loss_fn(y_pred, y_train) # calculate loss\n","  loss_values.append(loss)\n","  #print(f\"Loss: {loss}\")\n","\n","  optimizer.zero_grad() # optimizer zero grad. Otherwise optimizer accumulates. we set it everytime to 0\n","\n","  loss.backward() # perform back propagation\n","\n","  optimizer.step() # perform gradient descent\n","\n","\n","  model_0.eval()\n","  with torch.inference_mode(): # with these 2 we enter testing mode\n","\n","    test_pred = model_0(X_test)\n","\n","    test_loss = loss_fn(test_pred, y_test)\n","    test_loss_values.append(test_loss)\n","\n","    if epoch % 10 == 0:\n","      print(f\"Epoch: {epoch} | Training Loss: {loss} | Test Loss: {test_loss}\")\n","\n","  #model_0.state_dict() # check current values of parameters\n"],"metadata":{"id":"08MI4ZYWM-ms","executionInfo":{"status":"ok","timestamp":1731182823274,"user_tz":-60,"elapsed":11,"user":{"displayName":"xlu T","userId":"02570204609344976313"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"4e41b1fa-b214-47d1-deff-cc19263a1c59"},"execution_count":113,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 0 | Training Loss: 0.31288138031959534 | Test Loss: 0.48106518387794495\n","Epoch: 10 | Training Loss: 0.1976713240146637 | Test Loss: 0.3463551998138428\n","Epoch: 20 | Training Loss: 0.08908725529909134 | Test Loss: 0.21729660034179688\n","Epoch: 30 | Training Loss: 0.053148526698350906 | Test Loss: 0.14464017748832703\n","Epoch: 40 | Training Loss: 0.04543796554207802 | Test Loss: 0.11360953003168106\n","Epoch: 50 | Training Loss: 0.04167863354086876 | Test Loss: 0.09919948130846024\n","Epoch: 60 | Training Loss: 0.03818932920694351 | Test Loss: 0.08886633068323135\n","Epoch: 70 | Training Loss: 0.03476089984178543 | Test Loss: 0.0805937647819519\n","Epoch: 80 | Training Loss: 0.03132382780313492 | Test Loss: 0.07232122868299484\n","Epoch: 90 | Training Loss: 0.02788739837706089 | Test Loss: 0.06473556160926819\n","Epoch: 100 | Training Loss: 0.024458957836031914 | Test Loss: 0.05646304413676262\n","Epoch: 110 | Training Loss: 0.021020207554101944 | Test Loss: 0.04819049686193466\n","Epoch: 120 | Training Loss: 0.01758546568453312 | Test Loss: 0.04060482233762741\n","Epoch: 130 | Training Loss: 0.014155393466353416 | Test Loss: 0.03233227878808975\n","Epoch: 140 | Training Loss: 0.010716589167714119 | Test Loss: 0.024059748277068138\n","Epoch: 150 | Training Loss: 0.0072835334576666355 | Test Loss: 0.016474086791276932\n","Epoch: 160 | Training Loss: 0.0038517764769494534 | Test Loss: 0.008201557211577892\n","Epoch: 170 | Training Loss: 0.008932482451200485 | Test Loss: 0.005023092031478882\n","Epoch: 180 | Training Loss: 0.008932482451200485 | Test Loss: 0.005023092031478882\n","Epoch: 190 | Training Loss: 0.008932482451200485 | Test Loss: 0.005023092031478882\n"]}]},{"cell_type":"code","source":["#Plot Losses\n","plt.plot(np.array(range(0,epochs)),np.array(torch.tensor(loss_values).numpy()), label = \"Train Loss\")\n","plt.plot(np.array(range(0,epochs)),np.array(torch.tensor(test_loss_values).numpy()), label = \"Test Loss\")\n","plt.ylabel(\"Loss\")\n","plt.xlabel(\"Epochs\")\n","plt.legend()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":468},"id":"dxpHT88aPj39","executionInfo":{"status":"ok","timestamp":1731182823652,"user_tz":-60,"elapsed":388,"user":{"displayName":"xlu T","userId":"02570204609344976313"}},"outputId":"fe518e8d-53eb-4f2e-d8ce-eeeadbbc33ef"},"execution_count":114,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7844662e5510>"]},"metadata":{},"execution_count":114},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Saving and Load a Model in PyTorch\n","\n","There are 3 ways\n","1. torch.save() - save in Python pickle format\n","2. torch.load()\n","4. torch.nn.Module.load_state_dict() - load saved state dictionary"],"metadata":{"id":"zhqIpavtUIdm"}},{"cell_type":"code","source":["# Save a model (only the state_dict!)\n","from pathlib import Path\n","\n","#1. Create models directory with code\n","Model_Path = Path(\"models\")\n","Model_Path.mkdir(parents=True, exist_ok=True)\n","\n","#2. Model save path\n","model_name = \"01_pytorch.pth\"\n","model_save_path = Model_Path / model_name\n","\n","model_save_path # I get this path 'models/01_pytorch.pth'\n","\n","#3. Save the model state_dict, it's better!\n","\n","torch.save(model_0.state_dict(), model_save_path)\n","\n","# Now you can dowload in local"],"metadata":{"id":"0mMx-W79ULI2","executionInfo":{"status":"ok","timestamp":1731182823653,"user_tz":-60,"elapsed":10,"user":{"displayName":"xlu T","userId":"02570204609344976313"}}},"execution_count":115,"outputs":[]},{"cell_type":"code","source":["# Load a state_dict\n","\n","# Initialize an object of Model class first, in my case LinearRegressionModel\n","loaded_model_0 = LinearRegressionModel()\n","\n","loaded_model_0.load_state_dict(torch.load(model_save_path))\n","\n","loaded_model_0.state_dict() #loaded correctly"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CNTQiR1yAY2h","executionInfo":{"status":"ok","timestamp":1731182823653,"user_tz":-60,"elapsed":9,"user":{"displayName":"xlu T","userId":"02570204609344976313"}},"outputId":"7494cf14-d762-402f-c077-8ea8030c1140"},"execution_count":116,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-116-1e9d823c4626>:6: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  loaded_model_0.load_state_dict(torch.load(model_save_path))\n"]},{"output_type":"execute_result","data":{"text/plain":["OrderedDict([('weights', tensor([0.6990])), ('bias', tensor([0.3093]))])"]},"metadata":{},"execution_count":116}]},{"cell_type":"markdown","source":["## Putting all together"],"metadata":{"id":"kjTq2mrCDDqp"}},{"cell_type":"code","source":["import torch\n","from torch import nn\n","import matplotlib.pyplot as plt\n","\n","# Device-agnostic code\n","\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","print(f\"I am using the device: {device}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EtugtuUFDFuH","executionInfo":{"status":"ok","timestamp":1731182823654,"user_tz":-60,"elapsed":8,"user":{"displayName":"xlu T","userId":"02570204609344976313"}},"outputId":"4b4a5fec-31ee-4595-c30b-36efdceba2bd"},"execution_count":117,"outputs":[{"output_type":"stream","name":"stdout","text":["I am using the device: cpu\n"]}]},{"cell_type":"code","source":["# Create data\n","\n","weight = 0.7\n","bias = 0.3\n","\n","X = torch.arange(0,1,0.02).unsqueeze(1)\n","y = bias + weight * X\n","\n","train_split = int(0.8 * len(X))\n","\n","X_train, y_train = X[:train_split], y[:train_split]\n","X_test, y_test = X[train_split:], y[train_split:]\n","\n","\n","#New way of creating the class (i.e. model)\n","class LinearRegressionModelV2(nn.Module):\n","  def __init__(self):\n","    super().__init__()\n","    self.linear_layer = nn.Linear(in_features = 1, # one input: X\n","                                  out_features = 1) # one output: y\n","\n","  def forward(self, x:torch.Tensor) -> torch.Tensor: # I am forcing to receive and output a tensor!!\n","    return self.linear_layer(x)\n","\n","torch.manual_seed(42)\n","\n","model_1 = LinearRegressionModelV2()\n","\n","loss = nn.L1Loss()\n","\n","optimizer = torch.optim.SGD(params = model_1.parameters(),\n","                            lr = 0.01)\n","\n","epochs = 200\n","\n","for epoch in range(epochs):\n","\n","  model_1.train()\n","  y_pred = model_1(X_train)\n","  loss_train = loss(y_pred, y_train)\n","  optimizer.zero_grad()\n","  loss_train.backward()\n","  optimizer.step()\n","  model_1.eval()\n","  with torch.inference_mode():\n","    test_pred = model_1(X_test)\n","    loss_pred = loss(test_pred, y_test)\n","\n","  if (epoch + 1) % 20 == 0 or epoch == epochs - 1:\n","    print(f\"Epoch {epoch+1}/{epochs} | Train Loss: {loss_train} | Test Loss: {loss_pred}\")\n","\n","model_1.state_dict()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6ua3qv3kD6vX","executionInfo":{"status":"ok","timestamp":1731182824139,"user_tz":-60,"elapsed":492,"user":{"displayName":"xlu T","userId":"02570204609344976313"}},"outputId":"a2a74a32-8ced-4e06-9af1-c49666409ed6"},"execution_count":118,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 20/200 | Train Loss: 0.3362792134284973 | Test Loss: 0.318027526140213\n","Epoch 40/200 | Train Loss: 0.1058594360947609 | Test Loss: 0.048607878386974335\n","Epoch 60/200 | Train Loss: 0.020298857241868973 | Test Loss: 0.046905118972063065\n","Epoch 80/200 | Train Loss: 0.013428186066448689 | Test Loss: 0.030360037460923195\n","Epoch 100/200 | Train Loss: 0.006563370116055012 | Test Loss: 0.014501834288239479\n","Epoch 120/200 | Train Loss: 0.010256484150886536 | Test Loss: 0.0003308236482553184\n","Epoch 140/200 | Train Loss: 0.010256484150886536 | Test Loss: 0.0003308236482553184\n","Epoch 160/200 | Train Loss: 0.010256484150886536 | Test Loss: 0.0003308236482553184\n","Epoch 180/200 | Train Loss: 0.010256484150886536 | Test Loss: 0.0003308236482553184\n","Epoch 200/200 | Train Loss: 0.010256484150886536 | Test Loss: 0.0003308236482553184\n"]},{"output_type":"execute_result","data":{"text/plain":["OrderedDict([('linear_layer.weight', tensor([[0.6968]])),\n","             ('linear_layer.bias', tensor([0.3025]))])"]},"metadata":{},"execution_count":118}]}]}